-- Active: 1686291172146@@127.0.0.1@5435@part4

/* Тестовые таблицы, функции и процедуры */

CREATE TABLE
    IF NOT EXISTS TableName_1 (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255)
    );

CREATE TABLE
    IF NOT EXISTS TableName_2 (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255)
    );

CREATE TABLE
    IF NOT EXISTS ableName_3 (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255)
    );

CREATE OR REPLACE FUNCTION MY_FUNCTION() RETURNS INTEGER 
LANGUAGE PLPGSQL AS $$ 
	DECLARE count_1 INTEGER;
	count_2 INTEGER;
	BEGIN RAISE NOTICE 'Hello, world!';
	SELECT COUNT(*) INTO count_2 FROM ableName_3;
	SELECT COUNT(*) INTO count_1 FROM ableName_3;
	RETURN count_1;
	END;
$$; 

CREATE OR REPLACE PROCEDURE MY_PROCEDURE() LANGUAGE 
PLPGSQL AS $$ 
	BEGIN END;
$$; 

CREATE OR REPLACE FUNCTION MY_SCALAR_FUNCTION(VALUE 
INTEGER) RETURNS INTEGER LANGUAGE PLPGSQL AS $$ 
	BEGIN RETURN 1;
	END;
$$; 

CREATE OR REPLACE FUNCTION MY_SCALAR_FUNCTION2(VALUE 
INTEGER) RETURNS INTEGER LANGUAGE PLPGSQL AS $$ 
	BEGIN RETURN 1;
	END;
$$; 

CREATE OR REPLACE FUNCTION MY_FUNCTION_TRIGGER() RETURNS 
TRIGGER LANGUAGE PLPGSQL AS $$ 
	BEGIN RETURN NEW;
	END;
$$; 

CREATE OR REPLACE TRIGGER MY_TRIGGER 
	BEFORE
	INSERT
	    ON ableName_3 FOR EACH ROW
	EXECUTE
	    PROCEDURE my_function_trigger();
; 

;

;

CREATE OR REPLACE TRIGGER MY_TRIGGER2 
	BEFORE
	INSERT
	    ON ableName_3 FOR EACH ROW
	EXECUTE
	    PROCEDURE my_function_trigger();
; 

;

;